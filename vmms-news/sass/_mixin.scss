@mixin fa5($icon) {
  content: $icon;
  font-family: 'Font Awesome 5 Pro';
}
@mixin box($width, $height: $width) {
  width: $width;
  height: $height;
}
@mixin font-size($font-size, $line-height: normal, $letter-spacing: normal) {
  font-size: $font-size * 1rem;
  @if $line-height!=normal {
    line-height: $line-height * 1rem;
  }

  @if $letter-spacing!=normal {
    letter-spacing: $letter-spacing * 1px;
  }
}
@mixin font($font-size, $line-height: normal, $font-weight: normal) {
  font-size: $font-size * 1rem;

  @if $line-height!=normal {
    line-height: $line-height * 1rem;
  }

  @if $font-weight!=normal {
    font-weight: $font-weight;
  }
}
@mixin line-clamp($line) {
  overflow: hidden;
  text-overflow: ellipsis;
  -webkit-line-clamp: $line;
  display: -webkit-box;
  -webkit-box-orient: vertical;
}
@mixin section-title {
  position: relative;
  margin-bottom: 3rem;
  display: inline-block;
  @include font(2.4, 3.3, bold);
  color: #fff;
  padding: 0.8rem 5.1rem 0.7rem 4.7rem;
  clip-path: polygon(25px 0, 100% 0, calc(100% - 25px) 100%, 0% 100%);
  background: transparent linear-gradient(180deg, #f8255e 0%, #830008 100%) 0%
    0% no-repeat padding-box;
  &::before {
    content: '';
    position: absolute;
    @include box(3.3rem, 100%);
    background: #fff;
    left: 1rem;
    top: 0;
    clip-path: polygon(calc(100% - 10px) 0, 100% 0, 10px 100%, 0% 100%);
  }
}
@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }

  @-moz-keyframes #{$name} {
    @content;
  }

  @keyframes #{$name} {
    @content;
  }
}

$grid-breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
);
@function breakpoint-next(
  $name,
  $breakpoints: $grid-breakpoints,
  $breakpoint-names: map-keys($breakpoints)
) {
  $n: index($breakpoint-names, $name);
  @return if(
    $n < length($breakpoint-names),
    nth($breakpoint-names, $n + 1),
    null
  );
}

@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
  $next: breakpoint-next($name, $breakpoints);
  @return if($next, breakpoint-min($next, $breakpoints) - 0.02px, null);
}

@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, '', '-#{$name}');
}

@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin media-breakpoint-between(
  $lower,
  $upper,
  $breakpoints: $grid-breakpoints
) {
  $min: breakpoint-min($lower, $breakpoints);
  $max: breakpoint-max($upper, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($lower, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($upper, $breakpoints) {
      @content;
    }
  }
}

@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  $max: breakpoint-max($name, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($name, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($name, $breakpoints) {
      @content;
    }
  }
}

@mixin owl($leftright) {
  &.owl-carousel {
    .owl-nav button {
      background: #e5e5e5;
      border: 0;
      position: absolute;
      top: 50%;
      transform: translateY(-50%);
      transition: all 0.5s;
      @include box(3rem);
      margin: 0;
      border-radius: 50%;
      padding: 0.7rem !important;
      &:hover {
        background-color: #e5e5e5 !important;
      }
    }
    .owl-nav button.owl-prev {
      left: $leftright;
      @include media-breakpoint-down(md) {
        left: -0.5rem;
      }
    }
    .owl-nav button.owl-next {
      right: $leftright;
      @include media-breakpoint-down(md) {
        right: -0.5rem;
      }
    }
    .owl-nav button.owl-prev,
    .owl-nav button.owl-next {
      &:hover {
        background-color: transparent;
        color: #333;
      }
      img {
        width: 1.6rem;
        height: 1.6rem;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
      }
    }
  }
}
@mixin font-face($font-name, $path, $weight: normal, $style: normal) {
  @font-face {
    font-family: quote($font-name);
    src: url($path + '.eot');
    src: url($path + '.eot?#iefix') format('embedded-opentype'),
      url($path + '.woff') format('woff'),
      url($path + '.ttf') format('truetype'),
      url($path + '.svg##{$font-name}') format('svg');
    font-weight: $weight;
    font-style: $style;
  }
}
@mixin img-cover($height) {
  &.image-cover {
    position: relative;
    height: auto;
    margin: 0 auto;
    overflow: hidden;
    padding-top: $height;
    img {
      right: 0;
      width: 100%;
      height: 100%;
      bottom: 0;
      left: 0;
      top: 0;
      position: absolute;
      -o-object-position: 50% 50%;
      object-position: 50% 50%;
      -o-object-fit: cover;
      object-fit: cover;
      font-family: 'object-fit: cover;';
      transition: all 0.4s ease;
    }
  }
}
